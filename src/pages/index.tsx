import Head from "next/head";
import { useState } from "react";
import ReactMarkdown from "react-markdown";

const Home = () => {
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState<null | string>(null);
  const [text, setText] = useState("");

  const handleClick = async (): Promise<void> => {
    setProcessing(true);
    setError(null);
    setText("");

    const response = await fetch("/api/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log("Edge function returned.");

    if (!response.ok) {
      setError(JSON.stringify(response.text()));
      setProcessing(false);
      throw new Error(response.statusText);
    }

    // This data is a ReadableStream
    const data = response.body;
    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    let lastMessage = "";

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);

      lastMessage = lastMessage + chunkValue;

      setText(lastMessage);
    }
    setProcessing(false);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex min-h-screen justify-center bg-gray-200 p-3">
        <main className="flex w-full max-w-2xl flex-col justify-start space-y-9   rounded-lg bg-white p-4 shadow-sm">
          <button
            className="w-full rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700"
            onClick={() => void handleClick()}
          >
            –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ üßô‚Äç‚ôÄÔ∏è
          </button>
          {error && <div>{error}</div>}
          {text && (
            <article className="prose">
              <ReactMarkdown>{text}</ReactMarkdown>
            </article>
          )}
          {processing && <div>–ü—Ä–∞—Ü—é—é ü§ñ ... 2-3 —Ö–≤–∏–ª–∏–Ω–∏ —ñ –±—É–¥–µ –≥–æ—Ç–æ–≤–æ</div>}
        </main>
      </div>
    </>
  );
};

export default Home;
